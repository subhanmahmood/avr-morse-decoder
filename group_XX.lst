
group_XX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001d2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000978  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000053  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_v>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <init>
	...

00000028 <timer1_cpt_v>:
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <timer1_cpt_isr>

0000002c <timer1_compa_v>:
  2c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <timer1_compa_isr>
  30:	00 00       	nop
	...

00000034 <timer1_ovr_v>:
  34:	0c 94 1c 00 	jmp	0x38	; 0x38 <timer1_ovr_isr>

00000038 <timer1_ovr_isr>:
  38:	18 95       	reti

0000003a <init>:
  3a:	08 e0       	ldi	r16, 0x08	; 8
  3c:	0e bf       	out	0x3e, r16	; 62
  3e:	0f ef       	ldi	r16, 0xFF	; 255
  40:	0d bf       	out	0x3d, r16	; 61
  42:	00 e0       	ldi	r16, 0x00	; 0
  44:	00 93 c1 00 	sts	0x00C1, r16	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  48:	0c 94 26 00 	jmp	0x4c	; 0x4c <__ctors_end>

0000004c <__ctors_end>:
	.global main 		; declaring main global, so it can be used in other files
main:
	;; output setup

	;; make these pins output:
	ldi r16, ALL_SEGS
  4c:	0e ef       	ldi	r16, 0xFE	; 254
	out DDRD, r16           ;
  4e:	0a b9       	out	0x0a, r16	; 10
	
	;; setup for button, DDRB0 is automatically an input.
	sbi PORTB, BUTTON 	; switch on the pull-up. Released
  50:	28 9a       	sbi	0x05, 0	; 5
				; button is 1, depressed button read as 0.

	;; setup the timer ([ATmega328p], Section 15.11.1, p126)

	clr r16
  52:	00 27       	eor	r16, r16
	sts TCCR1A, r16 	; setting timer output mode: no output
  54:	00 93 80 00 	sts	0x0080, r16	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				; pin used, normal counting up. 

	ldi r16, TIMEOUT	        ; time in 16ms ticks to detect a TIMEOUT,
  58:	00 e3       	ldi	r16, 0x30	; 48
				; about 400ms.
				; long and short button presses. 
	sts OCR1AH, r16		; move into high byte of compare match
  5a:	00 93 89 00 	sts	0x0089, r16	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				; register A
	
	clr r16			; low byte of compare match is just 0.
  5e:	00 27       	eor	r16, r16
	sts OCR1AL, r16         ; note 16bit registers always have to
  60:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				; [ATmega328p], Chapter 15.3, p 106

	;; enable input capture interrupt (to time button presses) and
	;; compare match interrupt (the time-out to switch on the
	;; yellow LED:
	ldi r16, _BV(ICIE1) | _BV(OCIE1A)
  64:	02 e2       	ldi	r16, 0x22	; 34
	sts TIMSK1, r16
  66:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	;; enable noise canceller, set prescaler to 1024, and start
	;; timer in CTC mode, [ATmega328p] section  15.11.2, p128
 
	ldi r16,  _BV(ICNC1) | _BV(CS12) | _BV(CS10) | _BV(WGM12)
  6a:	0d e8       	ldi	r16, 0x8D	; 141
	sts TCCR1B, r16
  6c:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	clr r19			; reset overflow flag to defined state
  70:	33 27       	eor	r19, r19

	sei			; enable interrupts globally.
  72:	78 94       	sei
	ldi r16, STANDBY
  74:	07 ef       	ldi	r16, 0xF7	; 247
	out PORTD, r16
  76:	0b b9       	out	0x0b, r16	; 11

00000078 <wait>:

wait:
	rjmp wait 		; do nothing :-) just wait for the
  78:	ff cf       	rjmp	.-2      	; 0x78 <wait>

0000007a <timer1_compa_isr>:
	.global timer1_compa_isr  ; export symbol to overwrite weak
				; definition in init.S
	
timer1_compa_isr:			

	push r16	
  7a:	0f 93       	push	r16
	in r16, SREG		; save the status register.
  7c:	0f b7       	in	r16, 0x3f	; 63
	push r16
  7e:	0f 93       	push	r16

	;; check whether we are waiting for a button press or release:
	lds r16, TCCR1B
  80:	00 91 81 00 	lds	r16, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbrs r16, ICES1 	; skip if waiting for postive edge (ie for button release)
  84:	06 ff       	sbrs	r16, 6
	rjmp awaiting_press
  86:	02 c0       	rjmp	.+4      	; 0x8c <awaiting_press>

00000088 <awaiting_release>:

awaiting_release:
	;;  make sure also an overly long press is always recognised
	;;  as a long press, irrespective of a timer overrun:

	ser r19 		; using r19 as a flag to indicate a
  88:	3f ef       	ldi	r19, 0xFF	; 255
				; timer overflow has occured.
    
	rjmp 1f
  8a:	02 c0       	rjmp	.+4      	; 0x90 <awaiting_press+0x4>

0000008c <awaiting_press>:

awaiting_press:	
	;; if we are waiting for a button press, then more time than
	;; TIME-OUT has elasped since the last release -- in this case
	;; we output the standby pattern to the display
    ldi r16, STANDBY
  8c:	07 ef       	ldi	r16, 0xF7	; 247
	out PORTD, r16
  8e:	0b b9       	out	0x0b, r16	; 11
	
1:	pop r16
  90:	0f 91       	pop	r16
	out SREG, r16 		; restore status register
  92:	0f bf       	out	0x3f, r16	; 63
	pop r16
  94:	0f 91       	pop	r16

	ldi r18, 0
  96:	20 e0       	ldi	r18, 0x00	; 0
	ldi r20, 0
  98:	40 e0       	ldi	r20, 0x00	; 0
	
	reti
  9a:	18 95       	reti

0000009c <timer1_cpt_isr>:
	
	.global timer1_cpt_isr

timer1_cpt_isr:

	push r8
  9c:	8f 92       	push	r8

	in r8, SREG 		; save the status register.
  9e:	8f b6       	in	r8, 0x3f	; 63
	push r8
  a0:	8f 92       	push	r8

	lds r8, ICR1L		; get the timer count when the capture event happened.
  a2:	80 90 86 00 	lds	r8, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	lds r8, ICR1H           ; we discard the low part, only
  a6:	80 90 87 00 	lds	r8, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
				; interested in the high part, but
				; reading low byte is necessary to get
				; a correct high byte in ICR1H, see
				; documentation [ATmega328p] Section 15.3 p106
	push r17				
  aa:	1f 93       	push	r17


	or r17, r8
  ac:	18 29       	or	r17, r8

	mov r17,r19		;  debounce. If there is no timer overflow and
  ae:	13 2f       	mov	r17, r19
	or r17,r8		;  ICR1H is still zero, then 
  b0:	18 29       	or	r17, r8
				;  less than 16ms have elapsed since
				;  last release or press
	breq debounce		;  and we do nothing
  b2:	79 f0       	breq	.+30     	; 0xd2 <debounce>



	clr r17
  b4:	11 27       	eor	r17, r17
	sts TCNT1H, r17 	; reset timer, first writing the high byte to the latch
  b6:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	sts TCNT1L, r17		; then the low byte -- Section 15.11.4 of [ATmega328p] p130.
  ba:	10 93 84 00 	sts	0x0084, r17	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	;; check whether we were looking for a positive or a negative edge:
	lds r17, TCCR1B
  be:	10 91 81 00 	lds	r17, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbrs  r17, ICES1	; skip next instruction if positive edge dedection.
  c2:	16 ff       	sbrs	r17, 6
	
	rjmp pressed		; we have a negative edge ie button
  c4:	03 c0       	rjmp	.+6      	; 0xcc <pressed>
				; has been pressed

	;; positive edge, button has been released
	rcall released
  c6:	0a d0       	rcall	.+20     	; 0xdc <released>

	andi r17, ~(_BV(ICES1)) ; we have had positive edge, so next
  c8:	1f 7b       	andi	r17, 0xBF	; 191
				; time looking for negative edge
	rjmp end_isr
  ca:	01 c0       	rjmp	.+2      	; 0xce <end_isr>

000000cc <pressed>:

	
pressed:
	
	ori r17, _BV(ICES1)	
  cc:	10 64       	ori	r17, 0x40	; 64

000000ce <end_isr>:

end_isr:
	sts TCCR1B, r17 	; write r17 to TCCR1B to activate the
  ce:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

000000d2 <debounce>:
				; change in edge detection.
	
debounce:
	pop r17
  d2:	1f 91       	pop	r17
	pop r8
  d4:	8f 90       	pop	r8
	out SREG, r8		; restore status register
  d6:	8f be       	out	0x3f, r8	; 63
	pop r8
  d8:	8f 90       	pop	r8

	reti
  da:	18 95       	reti

000000dc <released>:
;;; It expects the durations of button presses in 16ms ticks in r8


released:

	push r16
  dc:	0f 93       	push	r16

	tst r19 		; Did we have a timer overflow
  de:	33 23       	and	r19, r19
				; (ldi r16, _BV(SEG_D)
	out PORTD, r16	;ie more than TIMEOUT time since the
  e0:	0b b9       	out	0x0b, r16	; 11
				; last released of the button?
	brne long_press		; if yes, then signal is a long
  e2:	19 f4       	brne	.+6      	; 0xea <long_press>
				; press in any case

	;; is the signal longer then DECISION_LIMIT?

	ldi r16, DECISION_LIMIT
  e4:	0c e0       	ldi	r16, 0x0C	; 12
	cp r8,r16
  e6:	80 16       	cp	r8, r16
	brcs short_press		; if it is shorter jump to label short
  e8:	20 f0       	brcs	.+8      	; 0xf2 <short_press>

000000ea <long_press>:


	
long_press:
	inc r18			;increment r18 to keep track of length of pattern
  ea:	23 95       	inc	r18
	lsl r20			;logically shift bit pattern in r20 to the left
  ec:	44 0f       	add	r20, r20
	inc r20			;increment bit pattern in r20 to represent a dash
  ee:	43 95       	inc	r20
	rjmp 1f
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <short_press+0x4>

000000f2 <short_press>:

short_press:
	inc r18			;increment r18 to keep track of length of pattern
  f2:	23 95       	inc	r18
	lsl r20			;logically shift bit pattern in r20 to the left
  f4:	44 0f       	add	r20, r20

1:	
	
	pop r16
  f6:	0f 91       	pop	r16
	clr r19			; clear overflow flag in case it was set
  f8:	33 27       	eor	r19, r19

	cpi r18, 1
  fa:	21 30       	cpi	r18, 0x01	; 1
	breq length_1
  fc:	61 f0       	breq	.+24     	; 0x116 <length_1>

	cpi r18, 2
  fe:	22 30       	cpi	r18, 0x02	; 2
	breq length_2
 100:	99 f0       	breq	.+38     	; 0x128 <length_2>

	cpi r18, 3
 102:	23 30       	cpi	r18, 0x03	; 3
	breq length_3
 104:	11 f1       	breq	.+68     	; 0x14a <length_3>

	cpi r18, 4
 106:	24 30       	cpi	r18, 0x04	; 4
	breq length_4
 108:	d9 f1       	breq	.+118    	; 0x180 <length_4>

	cpi r18, 5
 10a:	25 30       	cpi	r18, 0x05	; 5
	brge error
 10c:	0c f4       	brge	.+2      	; 0x110 <error>
	ret
 10e:	08 95       	ret

00000110 <error>:

error:
	ldi r16, ERROR
 110:	0f eb       	ldi	r16, 0xBF	; 191
	out PORTD, r16
 112:	0b b9       	out	0x0b, r16	; 11
	ret
 114:	08 95       	ret

00000116 <length_1>:

length_1:
	ldi r16, CHAR_E
 116:	07 e0       	ldi	r16, 0x07	; 7
	cpi r20, 0
 118:	40 30       	cpi	r20, 0x00	; 0
	breq display_letter2
 11a:	a9 f0       	breq	.+42     	; 0x146 <display_letter2>

	ldi r16, CHAR_T
 11c:	07 e8       	ldi	r16, 0x87	; 135
	cpi r20, 1
 11e:	41 30       	cpi	r20, 0x01	; 1
	breq display_letter2
 120:	91 f0       	breq	.+36     	; 0x146 <display_letter2>

	ldi r16, ERROR
 122:	0f eb       	ldi	r16, 0xBF	; 191
	rjmp display_letter
 124:	54 c0       	rjmp	.+168    	; 0x1ce <display_letter>

	ret
 126:	08 95       	ret

00000128 <length_2>:

length_2:
	ldi r16, CHAR_I
 128:	09 ef       	ldi	r16, 0xF9	; 249
	cpi r20, 0
 12a:	40 30       	cpi	r20, 0x00	; 0
	breq display_letter2
 12c:	61 f0       	breq	.+24     	; 0x146 <display_letter2>

	ldi r16, CHAR_A
 12e:	09 e0       	ldi	r16, 0x09	; 9
	cpi r20, 1
 130:	41 30       	cpi	r20, 0x01	; 1
	breq display_letter2
 132:	49 f0       	breq	.+18     	; 0x146 <display_letter2>
	
	ldi r16, CHAR_N
 134:	09 e4       	ldi	r16, 0x49	; 73
	cpi r20, 2
 136:	42 30       	cpi	r20, 0x02	; 2
	breq display_letter2
 138:	31 f0       	breq	.+12     	; 0x146 <display_letter2>

	ldi r16, CHAR_M
 13a:	0b e6       	ldi	r16, 0x6B	; 107
	cpi r20, 3
 13c:	43 30       	cpi	r20, 0x03	; 3
	breq display_letter2
 13e:	19 f0       	breq	.+6      	; 0x146 <display_letter2>

	ldi r16, ERROR
 140:	0f eb       	ldi	r16, 0xBF	; 191
	rjmp display_letter
 142:	45 c0       	rjmp	.+138    	; 0x1ce <display_letter>

	ret
 144:	08 95       	ret

00000146 <display_letter2>:

display_letter2:
	out PORTD, r16
 146:	0b b9       	out	0x0b, r16	; 11
	ret
 148:	08 95       	ret

0000014a <length_3>:

length_3:
	ldi r16, CHAR_S
 14a:	03 e1       	ldi	r16, 0x13	; 19
	cpi r20, 0
 14c:	40 30       	cpi	r20, 0x00	; 0
	breq display_letter
 14e:	f9 f1       	breq	.+126    	; 0x1ce <display_letter>

	ldi r16, CHAR_U
 150:	01 ec       	ldi	r16, 0xC1	; 193
	cpi r20, 1
 152:	41 30       	cpi	r20, 0x01	; 1
	breq display_letter
 154:	e1 f1       	breq	.+120    	; 0x1ce <display_letter>

	ldi r16, CHAR_R
 156:	0d e4       	ldi	r16, 0x4D	; 77
	cpi r20, 2
 158:	42 30       	cpi	r20, 0x02	; 2
	breq display_letter
 15a:	c9 f1       	breq	.+114    	; 0x1ce <display_letter>

	ldi r16, CHAR_W
 15c:	01 e8       	ldi	r16, 0x81	; 129
	cpi r20, 3
 15e:	43 30       	cpi	r20, 0x03	; 3
	breq display_letter
 160:	b1 f1       	breq	.+108    	; 0x1ce <display_letter>

	ldi r16, CHAR_D
 162:	01 e2       	ldi	r16, 0x21	; 33
	cpi r20, 4
 164:	44 30       	cpi	r20, 0x04	; 4
	breq display_letter
 166:	99 f1       	breq	.+102    	; 0x1ce <display_letter>

	ldi r16, CHAR_K
 168:	05 e8       	ldi	r16, 0x85	; 133
	cpi r20, 5
 16a:	45 30       	cpi	r20, 0x05	; 5
	breq display_letter
 16c:	81 f1       	breq	.+96     	; 0x1ce <display_letter>

	ldi r16, CHAR_G
 16e:	03 e4       	ldi	r16, 0x43	; 67
	cpi r20, 6
 170:	46 30       	cpi	r20, 0x06	; 6
	breq display_letter
 172:	69 f1       	breq	.+90     	; 0x1ce <display_letter>

	ldi r16, CHAR_O
 174:	01 e4       	ldi	r16, 0x41	; 65
	cpi r20, 7
 176:	47 30       	cpi	r20, 0x07	; 7
	breq display_letter
 178:	51 f1       	breq	.+84     	; 0x1ce <display_letter>

	ldi r16, ERROR
 17a:	0f eb       	ldi	r16, 0xBF	; 191
	rjmp display_letter
 17c:	28 c0       	rjmp	.+80     	; 0x1ce <display_letter>

	ret
 17e:	08 95       	ret

00000180 <length_4>:

length_4:
	ldi r16, CHAR_H
 180:	09 e8       	ldi	r16, 0x89	; 137
	cpi r20, 0
 182:	40 30       	cpi	r20, 0x00	; 0
	breq display_letter
 184:	21 f1       	breq	.+72     	; 0x1ce <display_letter>

	ldi r16, CHAR_V
 186:	0d e8       	ldi	r16, 0x8D	; 141
	cpi r20, 1
 188:	41 30       	cpi	r20, 0x01	; 1
	breq display_letter
 18a:	09 f1       	breq	.+66     	; 0x1ce <display_letter>

	ldi r16, CHAR_F
 18c:	0f e0       	ldi	r16, 0x0F	; 15
	cpi r20, 2
 18e:	42 30       	cpi	r20, 0x02	; 2
	breq display_letter
 190:	f1 f0       	breq	.+60     	; 0x1ce <display_letter>

	ldi r16, CHAR_L
 192:	07 ec       	ldi	r16, 0xC7	; 199
	cpi r20, 4
 194:	44 30       	cpi	r20, 0x04	; 4
	breq display_letter
 196:	d9 f0       	breq	.+54     	; 0x1ce <display_letter>

	ldi r16, CHAR_P
 198:	0d e0       	ldi	r16, 0x0D	; 13
	cpi r20, 6
 19a:	46 30       	cpi	r20, 0x06	; 6
	breq display_letter
 19c:	c1 f0       	breq	.+48     	; 0x1ce <display_letter>

	ldi r16, CHAR_J
 19e:	01 ee       	ldi	r16, 0xE1	; 225
	cpi r20, 7
 1a0:	47 30       	cpi	r20, 0x07	; 7
	breq display_letter
 1a2:	a9 f0       	breq	.+42     	; 0x1ce <display_letter>

	ldi r16, CHAR_B
 1a4:	01 e0       	ldi	r16, 0x01	; 1
	cpi r20, 8
 1a6:	48 30       	cpi	r20, 0x08	; 8
	breq display_letter
 1a8:	91 f0       	breq	.+36     	; 0x1ce <display_letter>

	ldi r16, CHAR_X
 1aa:	0b e9       	ldi	r16, 0x9B	; 155
	cpi r20, 9
 1ac:	49 30       	cpi	r20, 0x09	; 9
	breq display_letter
 1ae:	79 f0       	breq	.+30     	; 0x1ce <display_letter>

	ldi r16, CHAR_C
 1b0:	07 e0       	ldi	r16, 0x07	; 7
	cpi r20, 10
 1b2:	4a 30       	cpi	r20, 0x0A	; 10
	breq display_letter
 1b4:	61 f0       	breq	.+24     	; 0x1ce <display_letter>

	ldi r16, CHAR_Y
 1b6:	01 e9       	ldi	r16, 0x91	; 145
	cpi r20, 11
 1b8:	4b 30       	cpi	r20, 0x0B	; 11
	breq display_letter
 1ba:	49 f0       	breq	.+18     	; 0x1ce <display_letter>

	ldi r16, CHAR_Z
 1bc:	05 e2       	ldi	r16, 0x25	; 37
	cpi r20, 12
 1be:	4c 30       	cpi	r20, 0x0C	; 12
	breq display_letter
 1c0:	31 f0       	breq	.+12     	; 0x1ce <display_letter>

	ldi r16, CHAR_Q
 1c2:	05 e1       	ldi	r16, 0x15	; 21
	cpi r20, 13
 1c4:	4d 30       	cpi	r20, 0x0D	; 13
	breq display_letter
 1c6:	19 f0       	breq	.+6      	; 0x1ce <display_letter>

	ldi r16, ERROR
 1c8:	0f eb       	ldi	r16, 0xBF	; 191
	rjmp display_letter
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <display_letter>

	ret
 1cc:	08 95       	ret

000001ce <display_letter>:


display_letter:
	out PORTD, r16
 1ce:	0b b9       	out	0x0b, r16	; 11
	ret
 1d0:	08 95       	ret
